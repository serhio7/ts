# -*- coding: utf-8 -*-
"""Untitled174.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ikVV3w7r2fI5KhiSh_j1C3-jDmcrGHEi

Формирование списка дат для предсказания
"""

from datetime import date, timedelta
import pandas as pd
datelist = pd.date_range(last_date + timedelta(days = 1) , periods=366).tolist()

"""last_date последняя дата с результатами 
dataset, validation - разделение на обучающую выборку и валидационную
"""

# split the dataset
import pandas as pd
xls = pd.ExcelFile('dataset.xlsx')
series = pd.read_excel(xls, 'vipl')
last_date = series.at[len(series)-1,'Time'].date()
series = series.set_index("Time").asfreq('d')

series = series.dropna()

split_point = len(series) - 7
dataset, validation = series[0:split_point], series[split_point:]
print('Dataset %d, Validation %d' % (len(dataset), len(validation)))
dataset.to_csv('dataset.csv', index=False)
validation.to_csv('validation.csv', index=False)

"""Функция рассчета разницы значений датасета"""

# create a differenced series
def difference(dataset, interval=1):
	diff = list()
	for i in range(interval, len(dataset)):
		value = dataset[i] - dataset[i - interval]
		diff.append(value)
	return numpy.array(diff)

"""Рассчет оригинального значения"""

# invert differenced value
def inverse_difference(history, yhat, interval=1):
	return yhat + history[-interval]

from pandas import read_csv
from statsmodels.tsa.arima_model import ARIMA
import numpy

# create a differenced series
def difference(dataset, interval=1):
	diff = list()
	for i in range(interval, len(dataset)):
		value = float(dataset[i]) - float(dataset[i - interval])
		diff.append(value)
	return numpy.array(diff)

# load dataset
series = read_csv('dataset.csv')
# seasonal difference
X = series.values
days_in_year = 365
differenced = difference(X, days_in_year)
# fit model иницилизация модели ARIMA для предсказания временного ряда
model = ARIMA(differenced, order=(2,1,3))
model_fit = model.fit(disp=0)
# print summary of fit model
print(model_fit.summary())

# Предсказание значений на год вперед 
forecast = model_fit.forecast(steps=366)[0]

# Преобразование значений в оригинальный формат
forecast = inverse_difference(X, forecast, days_in_year)

"""Формирование результирующего массива и запись его в файл"""

predtuple = []
for index,elem in enumerate(datelist):
    predtuple.append(tuple((elem,forecast[index])))
futuredatafr = pd.DataFrame(predtuple, columns=['Time','Amount'])
futuredatafr = futuredatafr.set_index("Time").asfreq('d')
futuredatafr.to_csv('result.csv')
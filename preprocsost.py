# -*- coding: utf-8 -*-
"""etalon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s5wjxRON4lrLe_4N8Q-iHikmGx4FsjLg
"""

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima_model import ARIMA
from pandas.plotting import register_matplotlib_converters
register_matplotlib_converters()

xls = pd.ExcelFile('dataset.xlsx')
df = pd.read_excel(xls, 'sost')
df['Time'] = pd.to_datetime(df['Time'],format='%Y-%m-%d',)

"""Добавляем информацию о частоте временного ряда (день)"""

df = df.set_index("Time").asfreq('d')
print (df.index)

"""Удаляем значения пустые"""

df = df.dropna()

df

df.index

"""Строим график"""

plt.xlabel('Date')
plt.ylabel('Amount')
plt.plot(df)

"""Определяем среднее для временного ряда
Определяем стандартное отклонение для временного ряда
"""

rolling_mean = df.rolling(window = 365).mean()
rolling_std = df.rolling(window = 365).std()
plt.plot(df, color = 'blue', label = 'Original')
plt.plot(rolling_mean, color = 'red', label = 'Rolling Mean')
plt.plot(rolling_std, color = 'black', label = 'Rolling Std')
plt.legend(loc = 'best')
plt.title('Rolling Mean & Rolling Standard Deviation')
plt.show()

#result = adfuller(df['Amount'])
print('ADF Statistic: {}'.format(result[0]))
print('p-value: {}'.format(result[1]))
print('Critical Values:')
for key, value in result[4].items():
    print('\t{}: {}'.format(key, value))

"""Применяем логорифм ко всем значениям временного ряда"""

df_log = np.log(df)
plt.plot(df_log)

def get_stationarity(timeseries):
    
    # rolling statistics
    rolling_mean = timeseries.rolling(window=365).mean()
    rolling_std = timeseries.rolling(window=365).std()
    
    # rolling statistics plot
    original = plt.plot(timeseries, color='blue', label='Original')
    mean = plt.plot(rolling_mean, color='red', label='Rolling Mean')
    std = plt.plot(rolling_std, color='black', label='Rolling Std')
    plt.legend(loc='best')
    plt.title('Rolling Mean & Standard Deviation')
    plt.show(block=False)

"""Определяем стационарность ряда применяя среднее значения и стандартное отклонение вычисленное на логорифмированное временном ряде"""

rolling_mean = df_log.rolling(window=365).mean()
df_log_minus_mean = df_log - rolling_mean
df_log_minus_mean.dropna(inplace=True)
get_stationarity(df_log_minus_mean)

rolling_mean_exp_decay = df_log.ewm(halflife=365, min_periods=0, adjust=True).mean()
df_log_exp_decay = df_log - rolling_mean_exp_decay
df_log_exp_decay.dropna(inplace=True)
get_stationarity(df_log_exp_decay)

df_log_shift = df_log - df_log.shift()
df_log_shift.dropna(inplace=True)
get_stationarity(df_log_shift)

df_log.index